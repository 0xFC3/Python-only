# -*- coding: utf-8 -*-
"""Aufgabe 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OHDxn5vh70vbfscqsT036-gznZkyWwV3
"""

#read file
file = open("5.1.txt")
reader = file.readlines()
widerstaende = []
for line in reader:
  widerstaende.append(line.split())
for i in range(0, len(widerstaende)):
  widerstaende[i] = int(widerstaende[i][0])
  
ziele = [500, 140, 314, 315, 1620, 2719, 4242]
print(widerstaende)
print(ziele)

def seriell(liste):
  neu = 0
  for i in range(0, len(liste)):
    neu += liste[i]
  return neu

def parallel(liste):
  neu = liste[0]
  for i in range(0, len(liste)-1):
    neu = 1/((1/neu)+(1/liste[i+1]))
  return neu

#test
print(seriell([10, 15]))
print(parallel([100, 120, 150, 180, 220]))

def maketestlist(k, widerstaende):
  test_liste = []
  if k == 1:
    for element in widerstaende:
      test_liste.append([element])
  if k == 2:
    for element in widerstaende:
      for other_element in widerstaende:
        if element == other_element:
          break
        test_liste.append([element, other_element])
  if k == 3:
    for element in widerstaende:
      for second_element in widerstaende:
        for third_element in widerstaende:
          if element == third_element or second_element == third_element or element == second_element:
            break
          test_liste.append([element, second_element, third_element])
  if k == 4:
    for element in widerstaende:
      for second_element in widerstaende:
        for third_element in widerstaende:
          for fourth_element in widerstaende:
            
            if element == third_element or second_element == third_element or element == second_element or element == fourth_element or second_element == fourth_element or third_element == fourth_element:
              break
            test_liste.append([element, second_element, third_element, fourth_element])
  return test_liste
def findbestparallel(zielwert, widerstaende, k):
  widerstaende = sorted(widerstaende)
  best = 0
  bauplan = []
  ungenauigkeit = zielwert
  test_liste = maketestlist(k, widerstaende)
  for i in range(len(test_liste)):
    ergebnis = parallel(test_liste[i])
    if ergebnis < zielwert:
      ungenauigkeit_1 = zielwert - ergebnis
    else:
      ungenauigkeit_1 = ergebnis - zielwert
    if ungenauigkeit_1 < ungenauigkeit:
      best = ergebnis
      bauplan = test_liste[i]
      ungenauigkeit = ungenauigkeit_1
        
   
  return bauplan
  
  
def findbestseriell(zielwert, widerstaende, k):
  widerstaende = sorted(widerstaende)
  best = 0
  bauplan = []
  ungenauigkeit = zielwert
  test_liste = maketestlist(k, widerstaende)
  for i in range(len(test_liste)):
    ergebnis = seriell(test_liste[i])
    if ergebnis < zielwert:
      ungenauigkeit_1 = zielwert - ergebnis
    else:
      ungenauigkeit_1 = ergebnis - zielwert
    if ungenauigkeit_1 < ungenauigkeit:
      best = ergebnis
      bauplan = test_liste[i]
      ungenauigkeit = ungenauigkeit_1    
  return bauplan

def berechneungenauigkeit(ziele, ergebnisse):
  ungenauigkeit = []
  for i in range(len(ziele)):
    if ziele[i] < ergebnisse[i]:
      ungenauigkeit.append(ergebnisse[i] - ziele[i])
    else:
      ungenauigkeit.append(ziele[i] - ergebnisse[i])
  return ungenauigkeit

#f端r k = 1
widerstaende_k1 = []
bauplan_k1 = []
for ziel in ziele:
  widerstand = findbestseriell(ziel, widerstaende, 1)
  widerstaende_k1.append(widerstand[0])
  
ungenauigkeit_k1 = berechneungenauigkeit(ziele, widerstaende_k1)
bauplan_k1 = widerstaende_k1
print(bauplan_k1)
print(ungenauigkeit_k1)
print(ziele)
print(widerstaende_k1)

#f端r k = 2
widerstaende_k2 = []
bauplan_k2 = []
for ziel in ziele:
  bauplan_se = (findbestseriell(ziel, widerstaende, 2))
  bauplan_pa = (findbestparallel(ziel, widerstaende, 2))
  best_seriell = seriell(bauplan_se)
  best_parallel = parallel(bauplan_pa)
  if best_seriell < ziel:
    ungenauigkeit_se = ziel - best_seriell
  else:
    ungenauigkeit_se = best_seriell - ziel
  if best_parallel < ziel:
    ungenauigkeit_pa = ziel - best_parallel
  else:
    ungenauigkeit_pa = best_parallel - ziel
  if ungenauigkeit_pa < ungenauigkeit_se:
    widerstaende_k2.append(best_parallel)
    app = ['parallel', bauplan_pa]
    bauplan_k2.append(app)
  else:
    widerstaende_k2.append(best_seriell)
    app = ['seriell', bauplan_se]
    bauplan_k2.append(app)
ungenauigkeit_k2 = berechneungenauigkeit(ziele, widerstaende_k2)
print(bauplan_k2)
print(ungenauigkeit_k2)
print(ziele)
print(widerstaende_k2)

#f端r k = 3
widerstaende_k3 = []
bauplan_k3 = []
for ziel in ziele:
  bauplan_se = (findbestseriell(ziel, widerstaende, 3))
  bauplan_pa = (findbestparallel(ziel, widerstaende, 3))
  best_seriell = seriell(bauplan_se)
  best_parallel = parallel(bauplan_pa)
  if best_seriell < ziel:
    ungenauigkeit_se = ziel - best_seriell
  else:
    ungenauigkeit_se = best_seriell - ziel
  if best_parallel < ziel:
    ungenauigkeit_pa = ziel - best_parallel
  else:
    ungenauigkeit_pa = best_parallel - ziel
  if ungenauigkeit_pa < ungenauigkeit_se:
    widerstaende_k3.append(best_parallel)
    app = ['parallel', bauplan_pa]
    bauplan_k3.append(app)
  else:
    widerstaende_k3.append(best_seriell)
    app = ['seriell', bauplan_se]
    bauplan_k3.append(app)
ungenauigkeit_k3 = berechneungenauigkeit(ziele, widerstaende_k3)
print(bauplan_k3)
print(ungenauigkeit_k3)
print(ziele)
print(widerstaende_k3)

#f端r k = 4
widerstaende_k4 = []
bauplan_k4 = []
for ziel in ziele:
  bauplan_se = (findbestseriell(ziel, widerstaende, 4))
  bauplan_pa = (findbestparallel(ziel, widerstaende, 4))
  best_seriell = seriell(bauplan_se)
  best_parallel = parallel(bauplan_pa)
  if best_seriell < ziel:
    ungenauigkeit_se = ziel - best_seriell
  else:
    ungenauigkeit_se = best_seriell - ziel
  if best_parallel < ziel:
    ungenauigkeit_pa = ziel - best_parallel
  else:
    ungenauigkeit_pa = best_parallel - ziel
  if ungenauigkeit_pa < ungenauigkeit_se:
    widerstaende_k4.append(best_parallel)
    app = ['parallel', bauplan_pa]
    bauplan_k4.append(app)
    
  else:
    widerstaende_k4.append(best_seriell)
    app = ['seriell', bauplan_se]
    bauplan_k4.append(app)
ungenauigkeit_k4 = berechneungenauigkeit(ziele, widerstaende_k4)
print(bauplan_k4)
print(ungenauigkeit_k4)
print(ziele)
print(widerstaende_k4)